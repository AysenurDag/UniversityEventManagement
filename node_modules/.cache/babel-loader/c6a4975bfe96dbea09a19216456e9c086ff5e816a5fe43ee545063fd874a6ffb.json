{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3000';\n\n// Function to fetch a list of events\nexport async function fetchEvents() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch events');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    throw error;\n  }\n}\n\n// Function to create a new event\nexport const createEvent = async eventData => {\n  // Implementation to create an event\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(eventData)\n    });\n    if (!response.ok) throw new Error('Event creation failed');\n    return response.json();\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Function to update an existing event\nexport const updateEvent = async (id, eventData) => {\n  // Implementation to update an event\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(eventData)\n    });\n    if (!response.ok) throw new Error('Event update failed');\n    return response.json();\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Function to delete an event\nexport async function deleteEvent(eventId) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete event');\n    }\n    return response.ok;\n  } catch (error) {\n    console.error('Error deleting event:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","fetchEvents","response","fetch","ok","Error","json","error","console","createEvent","eventData","method","headers","body","JSON","stringify","updateEvent","id","deleteEvent","eventId"],"sources":["/Users/aysenurdag/university-events-management/src/eventService.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:3000';\n\n// Function to fetch a list of events\nexport async function fetchEvents() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch events');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    throw error;\n  }\n}\n\n// Function to create a new event\nexport const createEvent = async (eventData) => {\n  // Implementation to create an event\n  try {\n    const response = await fetch(API_BASE_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(eventData)\n    });\n    if (!response.ok) throw new Error('Event creation failed');\n    return response.json();\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Function to update an existing event\nexport const updateEvent = async (id, eventData) => {\n  // Implementation to update an event\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(eventData)\n    });\n    if (!response.ok) throw new Error('Event update failed');\n    return response.json();\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n\n// Function to delete an event\nexport async function deleteEvent(eventId) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete event');\n    }\n    return response.ok;\n  } catch (error) {\n    console.error('Error deleting event:', error);\n    throw error;\n  }\n}\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;;AAE5C;AACA,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,YAAa,SAAQ,CAAC;IACtD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF;;AAEA;AACA,OAAO,MAAME,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC9C;EACA,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACH,YAAY,EAAE;MACzCW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,SAAS;IAChC,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,WAAW,GAAG,MAAAA,CAAOC,EAAE,EAAEP,SAAS,KAAK;EAClD;EACA,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,YAAa,IAAGiB,EAAG,EAAC,EAAE;MACpDN,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,SAAS;IAChC,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC;;AAGD;AACA,OAAO,eAAeW,WAAWA,CAACC,OAAO,EAAE;EACzC,IAAI;IACF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,YAAa,WAAUmB,OAAQ,EAAC,EAAE;MAChER,MAAM,EAAE;IACV,CAAC,CAAC;IACF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IACA,OAAOH,QAAQ,CAACE,EAAE;EACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/aysenurdag/university-events-management/src/pages/EventDetailPage.js\",\n  _s = $RefreshSig$();\n// EventDetailPage.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport EventDetail from '../components/EventDetail';\nimport events from '../mockData'; // Assuming you have a mock data file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  useEffect(() => {\n    // Implement logic to fetch the selected event based on the id\n    const fetchEvent = async () => {\n      try {\n        // Assuming events is an array of event objects with unique IDs\n        const event = events.find(event => event.id === parseInt(id, 10));\n        if (event) {\n          setSelectedEvent(event);\n        } else {\n          console.error('Event not found');\n        }\n      } catch (error) {\n        console.error('Error fetching event:', error);\n      }\n    };\n    fetchEvent();\n  }, [id]);\n  const handleUpdate = () => {\n    // Implement update logic\n    console.log('Update event:', selectedEvent);\n  };\n  const handleDelete = () => {\n    // Implement delete logic\n    console.log('Delete event:', selectedEvent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Event Detail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), selectedEvent ? /*#__PURE__*/_jsxDEV(EventDetail, {\n      event: selectedEvent,\n      onUpdate: handleUpdate,\n      onDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(EventDetailPage, \"TJh9+BQh6zg+w86R+zPo60Rohbw=\", false, function () {\n  return [useParams];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","EventDetail","events","jsxDEV","_jsxDEV","EventDetailPage","_s","id","selectedEvent","setSelectedEvent","fetchEvent","event","find","parseInt","console","error","handleUpdate","log","handleDelete","children","fileName","_jsxFileName","lineNumber","columnNumber","onUpdate","onDelete","_c","$RefreshReg$"],"sources":["/Users/aysenurdag/university-events-management/src/pages/EventDetailPage.js"],"sourcesContent":["// EventDetailPage.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport EventDetail from '../components/EventDetail';\nimport events from '../mockData'; // Assuming you have a mock data file\n\nconst EventDetailPage = () => {\n  const { id } = useParams();\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  useEffect(() => {\n    // Implement logic to fetch the selected event based on the id\n    const fetchEvent = async () => {\n      try {\n        // Assuming events is an array of event objects with unique IDs\n        const event = events.find((event) => event.id === parseInt(id, 10));\n\n        if (event) {\n          setSelectedEvent(event);\n        } else {\n          console.error('Event not found');\n        }\n      } catch (error) {\n        console.error('Error fetching event:', error);\n      }\n    };\n\n    fetchEvent();\n  }, [id]);\n\n  const handleUpdate = () => {\n    // Implement update logic\n    console.log('Update event:', selectedEvent);\n  };\n\n  const handleDelete = () => {\n    // Implement delete logic\n    console.log('Delete event:', selectedEvent);\n  };\n\n  return (\n    <div>\n      <h1>Event Detail</h1>\n      {selectedEvent ? (\n        <EventDetail\n          event={selectedEvent}\n          onUpdate={handleUpdate}\n          onDelete={handleDelete}\n        />\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default EventDetailPage;\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,MAAM,MAAM,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF;QACA,MAAMC,KAAK,GAAGT,MAAM,CAACU,IAAI,CAAED,KAAK,IAAKA,KAAK,CAACJ,EAAE,KAAKM,QAAQ,CAACN,EAAE,EAAE,EAAE,CAAC,CAAC;QAEnE,IAAII,KAAK,EAAE;UACTF,gBAAgB,CAACE,KAAK,CAAC;QACzB,CAAC,MAAM;UACLG,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAC;QAClC;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDL,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACH,EAAE,CAAC,CAAC;EAER,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACzB;IACAF,OAAO,CAACG,GAAG,CAAC,eAAe,EAAET,aAAa,CAAC;EAC7C,CAAC;EAED,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACzB;IACAJ,OAAO,CAACG,GAAG,CAAC,eAAe,EAAET,aAAa,CAAC;EAC7C,CAAC;EAED,oBACEJ,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBf,aAAa,gBACZJ,OAAA,CAACH,WAAW;MACVU,KAAK,EAAEH,aAAc;MACrBgB,QAAQ,EAAER,YAAa;MACvBS,QAAQ,EAAEP;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,gBAEFnB,OAAA;MAAAe,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACjB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjB,EAAA,CAhDID,eAAe;EAAA,QACJL,SAAS;AAAA;AAAA0B,EAAA,GADpBrB,eAAe;AAkDrB,eAAeA,eAAe;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3000';\n\n// Function to fetch a list of events\nexport async function fetchEvents() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch events');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    throw error;\n  }\n}\n\n// Function to create a new event\nexport async function createEvent(eventData) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(eventData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create event');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating event:', error);\n    throw error;\n  }\n}\n\n// Function to update an existing event\nexport async function updateEvent(eventId, eventData) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(eventData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update event');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating event:', error);\n    throw error;\n  }\n}\n\n// Function to delete an event\nexport async function deleteEvent(eventId) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete event');\n    }\n    return response.ok;\n  } catch (error) {\n    console.error('Error deleting event:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","fetchEvents","response","fetch","ok","Error","json","error","console","createEvent","eventData","method","headers","body","JSON","stringify","updateEvent","eventId","deleteEvent"],"sources":["/Users/aysenurdag/university-events-management/src/eventService.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:3000';\n\n// Function to fetch a list of events\nexport async function fetchEvents() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch events');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    throw error;\n  }\n}\n\n// Function to create a new event\nexport async function createEvent(eventData) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(eventData),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create event');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating event:', error);\n    throw error;\n  }\n}\n\n// Function to update an existing event\nexport async function updateEvent(eventId, eventData) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(eventData),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update event');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating event:', error);\n    throw error;\n  }\n}\n\n// Function to delete an event\nexport async function deleteEvent(eventId) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/events/${eventId}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete event');\n    }\n    return response.ok;\n  } catch (error) {\n    console.error('Error deleting event:', error);\n    throw error;\n  }\n}\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;;AAE5C;AACA,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,YAAa,SAAQ,CAAC;IACtD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF;;AAEA;AACA,OAAO,eAAeE,WAAWA,CAACC,SAAS,EAAE;EAC3C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,YAAa,SAAQ,EAAE;MACrDW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,SAAS;IAChC,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF;;AAEA;AACA,OAAO,eAAeS,WAAWA,CAACC,OAAO,EAAEP,SAAS,EAAE;EACpD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,YAAa,WAAUiB,OAAQ,EAAC,EAAE;MAChEN,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,SAAS;IAChC,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF;;AAEA;AACA,OAAO,eAAeW,WAAWA,CAACD,OAAO,EAAE;EACzC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,YAAa,WAAUiB,OAAQ,EAAC,EAAE;MAChEN,MAAM,EAAE;IACV,CAAC,CAAC;IACF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IACA,OAAOH,QAAQ,CAACE,EAAE;EACpB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}